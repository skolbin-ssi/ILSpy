name: Build ILSpy

on:
  push:
    branches: '**'
  pull_request:
    branches: [ master, release/** ]

jobs:
  Build:
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        Configuration: [ Debug, Release ]
    env:
      BuildPlatform: Any CPU
      StagingDirectory: buildartifacts 

    steps:
    - run: mkdir -p $env:StagingDirectory
      
    - name: Force git to use crlf, otherwise dotnet-format --check fails
      run: git config --global core.autocrlf true
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1

    - name: Install dotnet-format
      run: dotnet tool install dotnet-format --global --version 5.1.225507

    - name: Get Version
      id: version
      shell: pwsh
      run: |
        .\BuildTools\ghactions-install.ps1
        Get-ChildItem Env: | Where-Object {$_.Name -Match "^ILSPY_"} | %{ echo "::set-output name=$($_.Name)::$($_.Value)" }

    - name: Restore the application
      run: msbuild ILSpy.sln /t:Restore /p:Configuration=${{ matrix.configuration }} /p:Platform=$env:BuildPlatform

    - name: Build
      run: msbuild ILSpy.sln /p:Configuration=${{ matrix.configuration }} /p:Platform=$env:BuildPlatform /m

    - name: Execute unit tests
      run: dotnet test --logger "trx;LogFileName=${{ matrix.configuration }}-test-results.trx" $env:Tests1 $env:Tests2 $env:Tests3
      env:
        Tests1: ICSharpCode.Decompiler.Tests\bin\${{ matrix.configuration }}\net6.0-windows\win-x64\ICSharpCode.Decompiler.Tests.dll
        Tests2: ILSpy.Tests\bin\${{ matrix.configuration }}\net6.0-windows\ILSpy.Tests.dll
        Tests3: ILSpy.BamlDecompiler.Tests\bin\${{ matrix.configuration }}\net6.0-windows\win-x64\ILSpy.BamlDecompiler.Tests.dll

    - name: Upload Test Logs
      uses: actions/upload-artifact@v2
      if: success() || failure()
      with:
        name: test-results-${{ matrix.configuration }}
        path: '**/*.trx'

    - name: Create Test Report
      uses: phoenix-actions/test-reporting@v6
      if: github.event_name != 'pull_request' && (success() || failure())
      with:
        name: Unit Test Results (${{ matrix.configuration }})
        path: '**/*.trx'
        reporter: dotnet-trx
        list-suites: 'all'
        list-tests: 'failed'

    - name: Style - tab check
      run: python BuildTools\tidy.py
    
    - name: Zip ILSpy (framework-dependent)
      run: 7z a -tzip $env:StagingDirectory\ILSpy_binaries.zip .\ILSpy\bin\${{ matrix.configuration }}\net6.0-windows\*.dll .\ILSpy\bin\${{ matrix.configuration }}\net6.0-windows\*.exe .\ILSpy\bin\${{ matrix.configuration }}\net6.0-windows\*.config .\ILSpy\bin\${{ matrix.configuration }}\net6.0-windows\*.json .\ILSpy\bin\${{ matrix.configuration }}\net6.0-windows\*\ILSpy.resources.dll .\ILSpy\bin\${{ matrix.configuration }}\net6.0-windows\*\ILSpy.ReadyToRun.Plugin.resources.dll

    - name: Zip ILSpy Release (self-contained win-x64)
      if: matrix.configuration == 'release'    
      shell: pwsh
      run: |
        dotnet publish ./ILSpy/ILSpy.csproj -c Release --no-restore --self-contained -r win-x64
        dotnet publish ./ILSpy.ReadyToRun/ILSpy.ReadyToRun.csproj -c Release --no-restore --self-contained -r win-x64
        dotnet publish ./ILSpy.BamlDecompiler/ILSpy.BamlDecompiler.csproj -c Release --no-restore --self-contained -r win-x64
        7z a -tzip $env:StagingDirectory\ILSpy_selfcontained_x64.zip .\ILSpy\bin\Release\net6.0-windows\win-x64\publish\*     

    # https://github.com/actions/upload-artifact
    - name: Upload VSIX (VS 2019) release build artifacts
      if: matrix.configuration == 'release'
      uses: actions/upload-artifact@v2
      with:
        name: ILSpy VS Addin for VS 2017-2019 ${{ steps.version.outputs.ILSPY_VERSION_NUMBER }} (${{ matrix.configuration }})
        path: ILSpy.AddIn\bin\${{ matrix.configuration }}\net472\*.vsix
        if-no-files-found: error

    - name: Upload VSIX (VS 2022) release build artifacts
      if: matrix.configuration == 'release'
      uses: actions/upload-artifact@v2
      with:
        name: ILSpy VS Addin for VS 2022 ${{ steps.version.outputs.ILSPY_VERSION_NUMBER }} (${{ matrix.configuration }})
        path: ILSpy.AddIn.VS2022\bin\${{ matrix.configuration }}\net472\*.vsix
        if-no-files-found: error

    - name: Upload NuGet release build artifacts
      if: matrix.configuration == 'release'
      uses: actions/upload-artifact@v2
      with:
        name: ICSharpCode.Decompiler NuGet Package (${{ matrix.configuration }})
        path: ICSharpCode.Decompiler\bin\Release\ICSharpCode.Decompiler*.nupkg
        if-no-files-found: error

    - name: Publish NuGet
      if: github.ref == 'refs/heads/master' && matrix.configuration == 'release'
      run: |
        dotnet nuget push "ICSharpCode.Decompiler\bin\Release\ICSharpCode.Decompiler*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/${{ github.repository_owner }}
      
    - name: Upload zip binaries build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ILSpy ${{ steps.version.outputs.ILSPY_VERSION_NUMBER }} (${{ matrix.configuration }})
        path: ${{ env.StagingDirectory }}\ILSpy_binaries.zip
        if-no-files-found: error

    - name: Upload self-contained zip build artifacts (Release-only)
      if: matrix.configuration == 'release'
      uses: actions/upload-artifact@v2
      with:
        name: ILSpy self-contained x64 ${{ steps.version.outputs.ILSPY_VERSION_NUMBER }} (${{ matrix.configuration }})
        path: ${{ env.StagingDirectory }}\ILSpy_selfcontained_x64.zip
        if-no-files-found: error

    - name: Upload installer artifact
      if: matrix.configuration == 'release'
      uses: actions/upload-artifact@v2
      with:
        name: ILSpy Installer ${{ steps.version.outputs.ILSPY_VERSION_NUMBER }} (${{ matrix.configuration }})
        path: ILSpy.Installer\wix\*.msi
        if-no-files-found: error

    - name: Upload ilspycmd release build artifacts
      if: matrix.configuration == 'release'
      uses: actions/upload-artifact@v2
      with:
        name: ilspycmd dotnet tool (${{ matrix.configuration }})
        path: ICSharpCode.ILSpyCmd\bin\Release\ilspycmd*.nupkg
        if-no-files-found: error
